(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{331:function(e,t,a){"use strict";a.r(t);var _=a(4),i=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"前端进阶算法-看完这篇-再也不怕堆排序、top-k、中位数问题面试了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端进阶算法-看完这篇-再也不怕堆排序、top-k、中位数问题面试了"}},[e._v("#")]),e._v(" 前端进阶算法：看完这篇，再也不怕堆排序、Top K、中位数问题面试了")]),e._v(" "),t("h3",{attrs:{id:"引言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[e._v("#")]),e._v(" 引言")]),e._v(" "),t("p",[e._v("堆是前端进阶必不可少的知识，也是面试的重难点，例如内存堆与垃圾回收、Top K 问题等，这篇文章将从基础开始梳理整个堆体系，按以下步骤来讲：")]),e._v(" "),t("ul",[t("li",[e._v("什么是堆")]),e._v(" "),t("li",[e._v("怎样建堆")]),e._v(" "),t("li",[e._v("堆排序")]),e._v(" "),t("li",[e._v("内存堆与垃圾回收")]),e._v(" "),t("li",[e._v("Top K 问题")]),e._v(" "),t("li",[e._v("中位数问题")]),e._v(" "),t("li",[e._v("最后来一道leetcode题目，加深理解")])]),e._v(" "),t("p",[e._v("下面开始吧👇")]),e._v(" "),t("h3",{attrs:{id:"一、堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、堆"}},[e._v("#")]),e._v(" 一、堆")]),e._v(" "),t("p",[e._v("满足下面两个条件的就是堆：")]),e._v(" "),t("ul",[t("li",[e._v("堆是一个完全二叉树")]),e._v(" "),t("li",[e._v("堆上的任意节点值都必须大于等于（"),t("strong",[e._v("大顶堆")]),e._v("）或小于等于（"),t("strong",[e._v("小顶堆")]),e._v("）其左右子节点值")])]),e._v(" "),t("p",[e._v("如果堆上的任意节点都大于等于子节点值，则称为 "),t("strong",[e._v("大顶堆")])]),e._v(" "),t("p",[e._v("如果堆上的任意节点都小于等于子节点值，则称为 "),t("strong",[e._v("小顶堆")])]),e._v(" "),t("p",[e._v("也就是说，在大顶堆中，根节点是堆中最大的元素；")]),e._v(" "),t("p",[e._v("在小顶堆中，根节点是堆中最小的元素；")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxSTeGsmKQUx8VOBTibec4sWL0pmpnz1pBpBJRyj2ZMWiaxGx6teqm00ow/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[e._v("上图我们可以看出："),t("strong",[e._v("堆其实可以用一个数组表示，给定一个节点的下标 "),t("code",[e._v("i")]),e._v(" ，那么它的父节点一定为 "),t("code",[e._v("A[i/2]")]),e._v(" ，左子节点为 "),t("code",[e._v("A[2i]")]),e._v(" ，右子节点为 "),t("code",[e._v("A[2i+1]")])])]),e._v(" "),t("h3",{attrs:{id:"二、怎样创建一个大-小-顶堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、怎样创建一个大-小-顶堆"}},[e._v("#")]),e._v(" 二、怎样创建一个大（小）顶堆")]),e._v(" "),t("p",[e._v("我们在上一节说过，完全二叉树适用于数组存储法（"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484632&idx=1&sn=0bc1a31c155315e82ee86f817488b72b&chksm=faec8000cd9b09160fef43ba7a3b9dd66239a1a6f00e6bddb3fceb050010065c55441ac9c790&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法7：小白都可以看懂的树与二叉树"),t("OutboundLink")],1),e._v("），而堆又是一个完全二叉树，所以它可以直接使用数组存储法存储：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Heap() {\n    let items = [,]\n}\n")])])]),t("p",[e._v("那么怎样去创建一个大顶堆（小顶堆）喃？")]),e._v(" "),t("p",[e._v("常用的方式有两种：")]),e._v(" "),t("ul",[t("li",[e._v("插入式创建：每次插入一个节点，实现一个大顶堆（或小顶堆）")]),e._v(" "),t("li",[e._v("原地创建：又称堆化，给定一组节点，实现一个大顶堆（或小顶堆）")])]),e._v(" "),t("h3",{attrs:{id:"三、插入式建堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、插入式建堆"}},[e._v("#")]),e._v(" 三、插入式建堆")]),e._v(" "),t("p",[t("strong",[e._v("插入节点：")])]),e._v(" "),t("ul",[t("li",[e._v("将节点插入到队尾")]),e._v(" "),t("li",[t("strong",[e._v("自下往上堆化：")]),e._v(" 将插入节点与其父节点比较，如果插入节点大于父节点（大顶堆）或插入节点小于父节点（小顶堆），则插入节点与父节点调整位置")]),e._v(" "),t("li",[e._v("一直重复上一步，直到不需要交换或交换到根节点，此时插入完成。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxBOR3miaHRTuw1v53ibiaTA8K8oXloDe24aowIQOCkM5UtQDMQEtiaRRBLA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function insert(key) {\n    items.push(key)\n    // 获取存储位置\n    let i = items.length-1 \n    while (i/2 > 0 && items[i] > items[i/2]) {  \n        swap(items, i, i/2); // 交换 \n        i = i/2; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n")])])]),t("p",[t("strong",[e._v("时间复杂度：")]),e._v(" O(logn)，为树的高度")]),e._v(" "),t("h3",{attrs:{id:"四、原地建堆-堆化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、原地建堆-堆化"}},[e._v("#")]),e._v(" 四、原地建堆（堆化）")]),e._v(" "),t("p",[e._v("假设一组序列：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let arr = [,1, 9, 2, 8, 3, 7, 4, 6, 5]\n")])])]),t("p",[e._v("原地建堆的方法有两种：一种是承袭上面插入的思想，即从前往后、自下而上式堆化建堆；与之对应的另一种是，从后往前、自上往下式堆化建堆。其中")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("自下而上式堆化")]),e._v(" ：将节点与其父节点比较，如果节点大于父节点（大顶堆）或节点小于父节点（小顶堆），则节点与父节点调整位置")]),e._v(" "),t("li",[t("strong",[e._v("自上往下式堆化")]),e._v(" ：将节点与其左右子节点比较，如果存在左右子节点大于该节点（大顶堆）或小于该节点（小顶堆），则将子节点的最大值（大顶堆）或最小值（小顶堆）与之交换")])]),e._v(" "),t("p",[t("strong",[e._v("所以，自下而上式堆是调整节点与父节点（往上走），自上往下式堆化是调整节点与其左右子节点（往下走）。")])]),e._v(" "),t("h4",{attrs:{id:"_1-从前往后、自下而上式堆化建堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-从前往后、自下而上式堆化建堆"}},[e._v("#")]),e._v(" 1. 从前往后、自下而上式堆化建堆")]),e._v(" "),t("p",[e._v("这里以小顶堆为例，")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxvEk8VcIUv8iaWnjfZ6u6x5MBI7OBmrBKLicc4Rgjd2KI6K7lLrbtTJXw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 初始有效序列长度为 1,上图中用 k 表示\nvar heapSize = 1\n// 原地建堆\nfunction buildHeap(items) {\n    while(heapSize < items.length - 1) {\n        heapSize ++\n        heapify(items, heapSize)\n    }\n}\n\nfunction heapify(items, i) {\n    // 自下而上式堆化\n    while (Math.floor(i/2) > 0 && items[i] < items[Math.floor(i/2)]) {  \n        swap(items, i, Math.floor(i/2)); // 交换 \n        i = Math.floor(i/2); \n    }\n}  \n\nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,5, 2, 3, 4, 1]\nbuildHeap(items)\nconsole.log(items)\n// [empty, 1, 2, 3, 5, 4]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h4",{attrs:{id:"_2-从后往前、自上而下式堆化建堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-从后往前、自上而下式堆化建堆"}},[e._v("#")]),e._v(" 2. 从后往前、自上而下式堆化建堆")]),e._v(" "),t("p",[e._v("这里以小顶堆为例")]),e._v(" "),t("p",[e._v("注意：从后往前并不是从序列的最后一个元素开始，而是从最后一个非叶子节点开始，这是因为，叶子节点没有子节点，不需要自上而下式堆化。")]),e._v(" "),t("p",[e._v("最后一个子节点的父节点为 "),t("code",[e._v("n/2")]),e._v(" ，所以从 "),t("code",[e._v("n/2")]),e._v(" 位置节点开始堆化：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxL7ic1oRLQnQjfnouIYoSCeF3h87aLKDicUy8XOyGU2Gd178s1WWicqicRQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 原地建堆\n// items: 原始序列\n// heapSize: 有效序列长度,上图用 k 表示\nfunction buildHeap(items, heapSize) {\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for (let i = Math.floor(heapSize/2); i >= 1; --i) {    \n        heapify(items, heapSize, i);  \n    }\n}\nfunction heapify(items, heapSize, i) {\n    // 自上而下式堆化\n    while (true) {\n        var maxIndex = i;\n        if(2*i <= heapSize && items[i] > items[i*2] ) {\n            maxIndex = i*2;\n        }\n        if(2*i+1 <= heapSize && items[maxIndex] > items[i*2+1] ) {\n            maxIndex = i*2+1;\n        }\n        if (maxIndex === i) break;\n        swap(items, i, maxIndex); // 交换 \n        i = maxIndex; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,5, 2, 3, 4, 1]\n// 因为 items[0] 不存储数据\n// 所以：heapSize = items.length - 1\nbuildHeap(items, items.length - 1)\nconsole.log(items)\n// [empty, 1, 2, 3, 4, 5]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h3",{attrs:{id:"五、排序算法-堆排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、排序算法-堆排序"}},[e._v("#")]),e._v(" 五、排序算法：堆排序")]),e._v(" "),t("h4",{attrs:{id:"_1-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-原理"}},[e._v("#")]),e._v(" 1. 原理")]),e._v(" "),t("p",[e._v("堆是一棵完全二叉树，它可以使用数组存储，并且大顶堆的最大值存储在根节点（i=1），所以我们可以每次取大顶堆的根结点与堆的最后一个节点交换，此时最大值放入了有效序列的最后一位，并且有效序列减1，有效堆依然保持完全二叉树的结构，然后堆化，成为新的大顶堆，重复此操作，知道有效堆的长度为 0，排序完成。")]),e._v(" "),t("p",[e._v("完整步骤为：")]),e._v(" "),t("ul",[t("li",[e._v("将原序列（n个）转化成一个大顶堆")]),e._v(" "),t("li",[e._v("设置堆的有效序列长度为 n")]),e._v(" "),t("li",[e._v("将堆顶元素（第一个有效序列）与最后一个子元素（最后一个有效序列）交换，并有效序列长度减1")]),e._v(" "),t("li",[e._v("堆化有效序列，使有效序列重新称为一个大顶堆")]),e._v(" "),t("li",[e._v("重复以上2步，直到有效序列的长度为 1，排序完成")])]),e._v(" "),t("h4",{attrs:{id:"_2-动图演示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-动图演示"}},[e._v("#")]),e._v(" 2. 动图演示")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_gif/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fx6qkpXGKtcE8rrEl3fZNEhQ8zLXOMM1QjPu5zfoIxgbZSIiaXRPIjIicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1",alt:"图片"}})]),e._v(" "),t("h4",{attrs:{id:"_3-代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现"}},[e._v("#")]),e._v(" 3. 代码实现")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function heapSort(items) {\n    // 构建大顶堆\n    buildHeap(items, items.length-1)\n    // 设置堆的初始有效序列长度为 items.length - 1\n    let heapSize = items.length - 1\n    for (var i = items.length - 1; i > 1; i--) {\n        // 交换堆顶元素与最后一个有效子元素\n        swap(items, 1, i);\n        // 有效序列长度减 1\n        heapSize --;\n        // 堆化有效序列(有效序列长度为 currentHeapSize，抛除了最后一个元素)\n        heapify(items, heapSize, 1);\n    }\n    return items;\n}\n\n// 原地建堆\n// items: 原始序列\n// heapSize: 有效序列长度\nfunction buildHeap(items, heapSize) {\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for (let i = Math.floor(heapSize/2); i >= 1; --i) {    \n        heapify(items, heapSize, i);  \n    }\n}\nfunction heapify(items, heapSize, i) {\n    // 自上而下式堆化\n    while (true) {\n        var maxIndex = i;\n        if(2*i <= heapSize && items[i] < items[i*2] ) {\n            maxIndex = i*2;\n        }\n        if(2*i+1 <= heapSize && items[maxIndex] < items[i*2+1] ) {\n            maxIndex = i*2+1;\n        }\n        if (maxIndex === i) break;\n        swap(items, i, maxIndex); // 交换 \n        i = maxIndex; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,1, 9, 2, 8, 3, 7, 4, 6, 5]\nheapSort(items)\n// [empty, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h4",{attrs:{id:"_4-复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析"}},[e._v("#")]),e._v(" 4. 复杂度分析")]),e._v(" "),t("p",[t("strong",[e._v("时间复杂度：")]),e._v(" 建堆过程的时间复杂度是 "),t("code",[e._v("O(n)")]),e._v(" ，排序过程的时间复杂度是 "),t("code",[e._v("O(nlogn)")]),e._v(" ，整体时间复杂度是 "),t("code",[e._v("O(nlogn)")])]),e._v(" "),t("p",[t("strong",[e._v("空间复杂度：")]),e._v(" "),t("code",[e._v("O(1)")])]),e._v(" "),t("h3",{attrs:{id:"六、内存堆与垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、内存堆与垃圾回收"}},[e._v("#")]),e._v(" 六、内存堆与垃圾回收")]),e._v(" "),t("p",[e._v("前端面试高频考察点，瓶子君已经在 栈 章节中介绍过，点击前往"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484417&idx=1&sn=c08cd285e412053dc2c2f1336752c5c9&chksm=faec80d9cd9b09cf266f62dbc5a1b26f5c9f897f6509ed379a20a8333a005b2d8701f6b9bb37&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法5：吊打面试官之数据结构栈（+leetcode刷题）"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"七、堆的经典应用-top-k-问题-常见于腾讯、字节等面试中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、堆的经典应用-top-k-问题-常见于腾讯、字节等面试中"}},[e._v("#")]),e._v(" 七、堆的经典应用：Top K 问题（常见于腾讯、字节等面试中）")]),e._v(" "),t("blockquote",[t("p",[e._v("什么是 Top K 问题？简单来说就是在一组数据里面找到频率出现最高的前 K 个数，或前 K 大（当然也可以是前 K 小）的数。")])]),e._v(" "),t("p",[e._v("这种问题我们该怎么处理喃？我们以从数组中取前 K 大的数据为例，可以按以下步骤来：")]),e._v(" "),t("ul",[t("li",[e._v("从数组中取前 "),t("code",[e._v("K")]),e._v(" 个数，构造一个小顶堆")]),e._v(" "),t("li",[e._v("从 "),t("code",[e._v("K+1")]),e._v(" 位开始遍历数组，每一个数据都和小顶堆的堆顶元素进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。")]),e._v(" "),t("li",[e._v("遍历完成后，堆中的数据就是前 K 大的数据")])]),e._v(" "),t("p",[e._v("遍历数组需要 O(N) 的时间复杂度，一次堆化需要 O(logK) 时间复杂度，所以利用堆求 Top K 问题的时间复杂度为 O(NlogK)。")]),e._v(" "),t("h4",{attrs:{id:"利用堆求-top-k-问题的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用堆求-top-k-问题的优势"}},[e._v("#")]),e._v(" 利用堆求 Top K 问题的优势")]),e._v(" "),t("p",[e._v("也许很多人会认为，这种求 Top K 问题可以使用排序呀，没必要使用堆呀")]),e._v(" "),t("p",[e._v("其实是可以使用排序来做的，将数组进行排序（可以是最简单的快排），去前 K 个数就可以了，so easy")]),e._v(" "),t("p",[e._v("但当我们需要在一个动态数组中求 Top K 元素怎么办喃，动态数组可能会插入或删除元素，难道我们每次求 Top K 问题的时候都需要对数组进行重新排序吗？那每次的时间复杂度都为 O(NlogN)")]),e._v(" "),t("p",[e._v("这里就可以使用堆，我们可以维护一个 K 大小的小顶堆，当有数据被添加到数组中时，就将它与堆顶元素比较，如果比堆顶元素大，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆；如果比堆顶元素小，则不做处理。这样，每次求 Top K 问题的时间复杂度仅为 O(logK)")]),e._v(" "),t("h3",{attrs:{id:"八、堆的经典应用-中位数问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、堆的经典应用-中位数问题"}},[e._v("#")]),e._v(" 八、堆的经典应用：中位数问题")]),e._v(" "),t("p",[e._v("除了 Top K 问题，堆还有一个经典的应用场景就是求中位数问题")]),e._v(" "),t("blockquote",[t("p",[e._v("中位数，就是处于中间的那个数：")]),e._v(" "),t("p",[e._v("[1, 2, 3, 4, 5]   的中位数是 3")]),e._v(" "),t("p",[e._v("[1, 2, 3, 4, 5, 6]  的中位数是 3, 4")]),e._v(" "),t("p",[e._v("即：")]),e._v(" "),t("p",[e._v("当 n % 2 !== 0 时，中位数为：arr[(n-1)/2]")]),e._v(" "),t("p",[e._v("当 n % 2 === 0 时，中位数为：arr[n/2],  arr[n/2 + 1]")])]),e._v(" "),t("p",[e._v("如何利用堆来求解中位数问题喃？")]),e._v(" "),t("p",[e._v("这里需要维护两个堆：")]),e._v(" "),t("ul",[t("li",[e._v("大顶堆：用来存取前 n/2 个小元素，如果 n 为奇数，则用来存取前 "),t("code",[e._v("Math.floor(n/2) + 1")]),e._v("个元素")]),e._v(" "),t("li",[e._v("小顶堆：用来存取后 n/2 个小元素")])]),e._v(" "),t("p",[e._v("那么，中位数就为：")]),e._v(" "),t("ul",[t("li",[e._v("n 为奇数：中位数是大顶堆的堆顶元素")]),e._v(" "),t("li",[e._v("n 为偶数：中位数是大顶堆的堆顶元素与小顶堆的堆顶元素")])]),e._v(" "),t("p",[e._v("当数组为动态数组时，每当数组中插入一个元素时，都需要如何调整堆喃？")]),e._v(" "),t("p",[e._v("如果插入元素比大顶堆的堆顶要大，则将该元素插入到小顶堆中；如果要小，则插入到大顶堆中。")]),e._v(" "),t("p",[e._v("当出入完后后，如果大顶堆、小顶堆中元素的个数不满足我们已上的要求，我们就需要不断的将大顶堆的堆顶元素或小顶堆的堆顶元素移动到另一个堆中，知道满足要求")]),e._v(" "),t("p",[e._v("由于插入元素到堆、移动堆顶元素都需要堆化，所以，插入的时间复杂度为 O(logN) ，每次插入完成后求中位数仅仅需要返回堆顶元素即可，时间复杂度为 O(1)")]),e._v(" "),t("h4",{attrs:{id:"中位数的变形-tp-99-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中位数的变形-tp-99-问题"}},[e._v("#")]),e._v(" 中位数的变形：TP 99 问题")]),e._v(" "),t("blockquote",[t("p",[e._v("TP 99 问题：指在一个时间段内（如5分钟），统计某个方法（或接口）每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序，取第 99% 的那个值作为 TP99 值；")]),e._v(" "),t("p",[e._v("例如某个接口在 5 分钟内被调用了100次，每次耗时从 1ms 到 100ms之间不等数据，将请求耗时从小到大排列，TP99 就是取第 100*0.99 = 99 次请求耗时 ，类似地 TP50、TP90，TP99越小，说明这个接口的性能越好")])]),e._v(" "),t("p",[e._v("所以，针对 TP99 问题，我们同样也可以维护两个堆，一个大顶堆，一个小顶堆。大顶堆中保存前 "),t("code",[e._v("99%")]),e._v(" 个数据，小顶堆中保存后 "),t("code",[e._v("1%")]),e._v(" 个数据。大顶堆堆顶的数据就是我们要找的 99% 响应时间。")]),e._v(" "),t("p",[e._v("本小节参考极客时间的：数据结构与算法之美")]),e._v(" "),t("h3",{attrs:{id:"九、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、总结"}},[e._v("#")]),e._v(" 九、总结")]),e._v(" "),t("p",[e._v("堆是一个完全二叉树，并且堆上的任意节点值都必须大于等于（"),t("strong",[e._v("大顶堆")]),e._v("）或小于等于（"),t("strong",[e._v("小顶堆")]),e._v("）其左右子节点值，推可以采用数组存储法存储，可以通过插入式建堆或原地建堆，堆的重要应用有：")]),e._v(" "),t("ul",[t("li",[e._v("堆排序")]),e._v(" "),t("li",[e._v("Top K 问题：堆化，取前 K 个元素")]),e._v(" "),t("li",[e._v("中位数问题：维护两个堆，一大（前50%）一小（后50%），奇数元素取大顶堆的堆顶，偶数取取大、小顶堆的堆顶")])]),e._v(" "),t("p",[e._v("JavaScript 的存储机制分为代码空间、栈空间以及堆空间，代码空间用于存放可执行代码，栈空间用于存放基本类型数据和引用类型地址，堆空间用于存放引用类型数据，当调用栈中执行完成一个执行上下文时，需要进行垃圾回收该上下文以及相关数据空间，存放在栈空间上的数据通过 ESP 指针来回收，存放在堆空间的数据通过副垃圾回收器（新生代）与主垃圾回收器（老生代）来回收。详情可查看"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484417&idx=1&sn=c08cd285e412053dc2c2f1336752c5c9&chksm=faec80d9cd9b09cf266f62dbc5a1b26f5c9f897f6509ed379a20a8333a005b2d8701f6b9bb37&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法5：吊打面试官之数据结构栈（+leetcode刷题）"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"十、leetcode刷题-最小的k个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、leetcode刷题-最小的k个数"}},[e._v("#")]),e._v(" 十、leetcode刷题：最小的k个数")]),e._v(" "),t("p",[e._v("话不多说，来一道题目加深一下理解吧：")]),e._v(" "),t("p",[e._v("输入整数数组 "),t("code",[e._v("arr")]),e._v(" ，找出其中最小的 "),t("code",[e._v("k")]),e._v(" 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。")]),e._v(" "),t("p",[t("strong",[e._v("示例 1：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n")])])]),t("p",[t("strong",[e._v("示例 2：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("输入：arr = [0,1,2,1], k = 1\n输出：[0]\n")])])]),t("p",[t("strong",[e._v("限制：")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("0 <= k <= arr.length <= 10000")])]),e._v(" "),t("li",[t("code",[e._v("0 <= arr[i] <= 10000")])])]),e._v(" "),t("p",[e._v("题目详情已提交到 https://github.com/sisterAn/JavaScript-Algorithms/issues/59 ，欢迎解答，欢迎star")]),e._v(" "),t("h3",{attrs:{id:"感谢阅读❤️"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#感谢阅读❤️"}},[e._v("#")]),e._v(" 感谢阅读❤️")]),e._v(" "),t("p",[e._v("欢迎关注「前端瓶子君」，回复「交流」加入前端交流群！")]),e._v(" "),t("p",[e._v("欢迎关注「前端瓶子君」，回复「算法」自动加入，从0到1构建完整的数据结构与算法体系！")]),e._v(" "),t("p",[e._v("在这里，瓶子君不仅介绍算法，还将算法与前端各个领域进行结合，包括浏览器、HTTP、V8、React、Vue源码等。")]),e._v(" "),t("p",[e._v("在这里，你可以每天学习一道大厂算法题（阿里、腾讯、百度、字节等等）或 leetcode，瓶子君都会在第二天解答哟！")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQYTquARVybx8MjPHdibmMQ3icWt2hR5uqZiaZs5KPpGiaeiaDAM8bb6fuawMD4QUcc8rFEMrTvEIy04cw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484898&idx=1&sn=17901b4eb404398e13afddaa9f5f7c08&chksm=faec813acd9b082c8e598b0511d813fffb41230563858bb13ca2a65421079915ba23e1b2e92c&scene=178&cur_album_id=1342984294104662017&rd2werd=1&key=af591244b6d224fe9e711c3b13e6dc0ff264eb28b895e38ea47c283f6b363d14f6cb4ca220a1eb167f688784bc87966cfce20b82805ac14fdd3cbe7986236db108fcf71951d2164cd01fbf93162c7b7344f1153658ebd10296de53943e22f97f2f9bd6bff664c0ceacf67431e54590281c52168082d3c841d576dc996bacbd17&ascene=1&uin=MTE5NzkwMDQyOA%3D%3D&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20G95)&version=13010510&nettype=WIFI&lang=zh_CN&fontScale=100&exportkey=AUhs5CZxb0xu%2BTgrcK1nDWQ%3D&pass_ticket=wFWGmZwhuThchaxD%2F8KCFyP5ohv32kJThs87R2RE0n8DjhSFnI501UNUy31Bvchp&wx_header=0&fontgear=3.000000",target:"_blank",rel:"noopener noreferrer"}},[e._v("》》面试官也在看的算法资料《《"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("“在看和转发”就是最大的支持")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qlogo.cn/mmbiz_jpg/iaUXCIgN4lOFcYSsSBnCia2E6kJJmR2Suh7a0Lm4TsmAxtmiaYRr5etvyHb7vIA6jb9kfVl2WSQBiciauzhLA50mtxg/0?wx_fmt=jpeg",alt:"作者"}})]),e._v(" "),t("p",[e._v("前端瓶子君")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484898&idx=1&sn=17901b4eb404398e13afddaa9f5f7c08&chksm=faec813acd9b082c8e598b0511d813fffb41230563858bb13ca2a65421079915ba23e1b2e92c&scene=178&cur_album_id=1342984294104662017&rd2werd=1&key=af591244b6d224fe9e711c3b13e6dc0ff264eb28b895e38ea47c283f6b363d14f6cb4ca220a1eb167f688784bc87966cfce20b82805ac14fdd3cbe7986236db108fcf71951d2164cd01fbf93162c7b7344f1153658ebd10296de53943e22f97f2f9bd6bff664c0ceacf67431e54590281c52168082d3c841d576dc996bacbd17&ascene=1&uin=MTE5NzkwMDQyOA%3D%3D&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20G95)&version=13010510&nettype=WIFI&lang=zh_CN&fontScale=100&exportkey=AUhs5CZxb0xu%2BTgrcK1nDWQ%3D&pass_ticket=wFWGmZwhuThchaxD%2F8KCFyP5ohv32kJThs87R2RE0n8DjhSFnI501UNUy31Bvchp&wx_header=0&fontgear=3.000000",alt:"赞赏二维码"}}),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484898&idx=1&sn=17901b4eb404398e13afddaa9f5f7c08&chksm=faec813acd9b082c8e598b0511d813fffb41230563858bb13ca2a65421079915ba23e1b2e92c&scene=178&cur_album_id=1342984294104662017&rd2werd=1&key=af591244b6d224fe9e711c3b13e6dc0ff264eb28b895e38ea47c283f6b363d14f6cb4ca220a1eb167f688784bc87966cfce20b82805ac14fdd3cbe7986236db108fcf71951d2164cd01fbf93162c7b7344f1153658ebd10296de53943e22f97f2f9bd6bff664c0ceacf67431e54590281c52168082d3c841d576dc996bacbd17&ascene=1&uin=MTE5NzkwMDQyOA%3D%3D&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20G95)&version=13010510&nettype=WIFI&lang=zh_CN&fontScale=100&exportkey=AUhs5CZxb0xu%2BTgrcK1nDWQ%3D&pass_ticket=wFWGmZwhuThchaxD%2F8KCFyP5ohv32kJThs87R2RE0n8DjhSFnI501UNUy31Bvchp&wx_header=0&fontgear=3.000000##",target:"_blank",rel:"noopener noreferrer"}},[e._v("喜欢作者"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484898&idx=1&sn=17901b4eb404398e13afddaa9f5f7c08&chksm=faec813acd9b082c8e598b0511d813fffb41230563858bb13ca2a65421079915ba23e1b2e92c&scene=178&cur_album_id=1342984294104662017&rd2werd=1&key=af591244b6d224fe9e711c3b13e6dc0ff264eb28b895e38ea47c283f6b363d14f6cb4ca220a1eb167f688784bc87966cfce20b82805ac14fdd3cbe7986236db108fcf71951d2164cd01fbf93162c7b7344f1153658ebd10296de53943e22f97f2f9bd6bff664c0ceacf67431e54590281c52168082d3c841d576dc996bacbd17&ascene=1&uin=MTE5NzkwMDQyOA%3D%3D&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20G95)&version=13010510&nettype=WIFI&lang=zh_CN&fontScale=100&exportkey=AUhs5CZxb0xu%2BTgrcK1nDWQ%3D&pass_ticket=wFWGmZwhuThchaxD%2F8KCFyP5ohv32kJThs87R2RE0n8DjhSFnI501UNUy31Bvchp&wx_header=0&fontgear=3.000000##",target:"_blank",rel:"noopener noreferrer"}},[e._v("阅读原文"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("阅读 1968")]),e._v(" "),t("p",[e._v("赞在看13前端进阶算法：看完这篇，再也不怕堆排序、Top K、中位数问题面试了")]),e._v(" "),t("p",[e._v("原创 前端瓶子君 前端瓶子君 "),t("em",[e._v("2020-06-03")])]),e._v(" "),t("p",[e._v("收录于话题#前端进阶算法14个")]),e._v(" "),t("h3",{attrs:{id:"引言-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引言-2"}},[e._v("#")]),e._v(" 引言")]),e._v(" "),t("p",[e._v("堆是前端进阶必不可少的知识，也是面试的重难点，例如内存堆与垃圾回收、Top K 问题等，这篇文章将从基础开始梳理整个堆体系，按以下步骤来讲：")]),e._v(" "),t("ul",[t("li",[e._v("什么是堆")]),e._v(" "),t("li",[e._v("怎样建堆")]),e._v(" "),t("li",[e._v("堆排序")]),e._v(" "),t("li",[e._v("内存堆与垃圾回收")]),e._v(" "),t("li",[e._v("Top K 问题")]),e._v(" "),t("li",[e._v("中位数问题")]),e._v(" "),t("li",[e._v("最后来一道leetcode题目，加深理解")])]),e._v(" "),t("p",[e._v("下面开始吧👇")]),e._v(" "),t("h3",{attrs:{id:"一、堆-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、堆-2"}},[e._v("#")]),e._v(" 一、堆")]),e._v(" "),t("p",[e._v("满足下面两个条件的就是堆：")]),e._v(" "),t("ul",[t("li",[e._v("堆是一个完全二叉树")]),e._v(" "),t("li",[e._v("堆上的任意节点值都必须大于等于（"),t("strong",[e._v("大顶堆")]),e._v("）或小于等于（"),t("strong",[e._v("小顶堆")]),e._v("）其左右子节点值")])]),e._v(" "),t("p",[e._v("如果堆上的任意节点都大于等于子节点值，则称为 "),t("strong",[e._v("大顶堆")])]),e._v(" "),t("p",[e._v("如果堆上的任意节点都小于等于子节点值，则称为 "),t("strong",[e._v("小顶堆")])]),e._v(" "),t("p",[e._v("也就是说，在大顶堆中，根节点是堆中最大的元素；")]),e._v(" "),t("p",[e._v("在小顶堆中，根节点是堆中最小的元素；")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxSTeGsmKQUx8VOBTibec4sWL0pmpnz1pBpBJRyj2ZMWiaxGx6teqm00ow/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[e._v("上图我们可以看出："),t("strong",[e._v("堆其实可以用一个数组表示，给定一个节点的下标 "),t("code",[e._v("i")]),e._v(" ，那么它的父节点一定为 "),t("code",[e._v("A[i/2]")]),e._v(" ，左子节点为 "),t("code",[e._v("A[2i]")]),e._v(" ，右子节点为 "),t("code",[e._v("A[2i+1]")])])]),e._v(" "),t("h3",{attrs:{id:"二、怎样创建一个大-小-顶堆-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、怎样创建一个大-小-顶堆-2"}},[e._v("#")]),e._v(" 二、怎样创建一个大（小）顶堆")]),e._v(" "),t("p",[e._v("我们在上一节说过，完全二叉树适用于数组存储法（"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484632&idx=1&sn=0bc1a31c155315e82ee86f817488b72b&chksm=faec8000cd9b09160fef43ba7a3b9dd66239a1a6f00e6bddb3fceb050010065c55441ac9c790&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法7：小白都可以看懂的树与二叉树"),t("OutboundLink")],1),e._v("），而堆又是一个完全二叉树，所以它可以直接使用数组存储法存储：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Heap() {\n    let items = [,]\n}\n")])])]),t("p",[e._v("那么怎样去创建一个大顶堆（小顶堆）喃？")]),e._v(" "),t("p",[e._v("常用的方式有两种：")]),e._v(" "),t("ul",[t("li",[e._v("插入式创建：每次插入一个节点，实现一个大顶堆（或小顶堆）")]),e._v(" "),t("li",[e._v("原地创建：又称堆化，给定一组节点，实现一个大顶堆（或小顶堆）")])]),e._v(" "),t("h3",{attrs:{id:"三、插入式建堆-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、插入式建堆-2"}},[e._v("#")]),e._v(" 三、插入式建堆")]),e._v(" "),t("p",[t("strong",[e._v("插入节点：")])]),e._v(" "),t("ul",[t("li",[e._v("将节点插入到队尾")]),e._v(" "),t("li",[t("strong",[e._v("自下往上堆化：")]),e._v(" 将插入节点与其父节点比较，如果插入节点大于父节点（大顶堆）或插入节点小于父节点（小顶堆），则插入节点与父节点调整位置")]),e._v(" "),t("li",[e._v("一直重复上一步，直到不需要交换或交换到根节点，此时插入完成。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxBOR3miaHRTuw1v53ibiaTA8K8oXloDe24aowIQOCkM5UtQDMQEtiaRRBLA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function insert(key) {\n    items.push(key)\n    // 获取存储位置\n    let i = items.length-1 \n    while (i/2 > 0 && items[i] > items[i/2]) {  \n        swap(items, i, i/2); // 交换 \n        i = i/2; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n")])])]),t("p",[t("strong",[e._v("时间复杂度：")]),e._v(" O(logn)，为树的高度")]),e._v(" "),t("h3",{attrs:{id:"四、原地建堆-堆化-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、原地建堆-堆化-2"}},[e._v("#")]),e._v(" 四、原地建堆（堆化）")]),e._v(" "),t("p",[e._v("假设一组序列：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let arr = [,1, 9, 2, 8, 3, 7, 4, 6, 5]\n")])])]),t("p",[e._v("原地建堆的方法有两种：一种是承袭上面插入的思想，即从前往后、自下而上式堆化建堆；与之对应的另一种是，从后往前、自上往下式堆化建堆。其中")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("自下而上式堆化")]),e._v(" ：将节点与其父节点比较，如果节点大于父节点（大顶堆）或节点小于父节点（小顶堆），则节点与父节点调整位置")]),e._v(" "),t("li",[t("strong",[e._v("自上往下式堆化")]),e._v(" ：将节点与其左右子节点比较，如果存在左右子节点大于该节点（大顶堆）或小于该节点（小顶堆），则将子节点的最大值（大顶堆）或最小值（小顶堆）与之交换")])]),e._v(" "),t("p",[t("strong",[e._v("所以，自下而上式堆是调整节点与父节点（往上走），自上往下式堆化是调整节点与其左右子节点（往下走）。")])]),e._v(" "),t("h4",{attrs:{id:"_1-从前往后、自下而上式堆化建堆-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-从前往后、自下而上式堆化建堆-2"}},[e._v("#")]),e._v(" 1. 从前往后、自下而上式堆化建堆")]),e._v(" "),t("p",[e._v("这里以小顶堆为例，")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxvEk8VcIUv8iaWnjfZ6u6x5MBI7OBmrBKLicc4Rgjd2KI6K7lLrbtTJXw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 初始有效序列长度为 1,上图中用 k 表示\nvar heapSize = 1\n// 原地建堆\nfunction buildHeap(items) {\n    while(heapSize < items.length - 1) {\n        heapSize ++\n        heapify(items, heapSize)\n    }\n}\n\nfunction heapify(items, i) {\n    // 自下而上式堆化\n    while (Math.floor(i/2) > 0 && items[i] < items[Math.floor(i/2)]) {  \n        swap(items, i, Math.floor(i/2)); // 交换 \n        i = Math.floor(i/2); \n    }\n}  \n\nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,5, 2, 3, 4, 1]\nbuildHeap(items)\nconsole.log(items)\n// [empty, 1, 2, 3, 5, 4]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h4",{attrs:{id:"_2-从后往前、自上而下式堆化建堆-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-从后往前、自上而下式堆化建堆-2"}},[e._v("#")]),e._v(" 2. 从后往前、自上而下式堆化建堆")]),e._v(" "),t("p",[e._v("这里以小顶堆为例")]),e._v(" "),t("p",[e._v("注意：从后往前并不是从序列的最后一个元素开始，而是从最后一个非叶子节点开始，这是因为，叶子节点没有子节点，不需要自上而下式堆化。")]),e._v(" "),t("p",[e._v("最后一个子节点的父节点为 "),t("code",[e._v("n/2")]),e._v(" ，所以从 "),t("code",[e._v("n/2")]),e._v(" 位置节点开始堆化：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fxL7ic1oRLQnQjfnouIYoSCeF3h87aLKDicUy8XOyGU2Gd178s1WWicqicRQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[t("strong",[e._v("代码实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 原地建堆\n// items: 原始序列\n// heapSize: 有效序列长度,上图用 k 表示\nfunction buildHeap(items, heapSize) {\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for (let i = Math.floor(heapSize/2); i >= 1; --i) {    \n        heapify(items, heapSize, i);  \n    }\n}\nfunction heapify(items, heapSize, i) {\n    // 自上而下式堆化\n    while (true) {\n        var maxIndex = i;\n        if(2*i <= heapSize && items[i] > items[i*2] ) {\n            maxIndex = i*2;\n        }\n        if(2*i+1 <= heapSize && items[maxIndex] > items[i*2+1] ) {\n            maxIndex = i*2+1;\n        }\n        if (maxIndex === i) break;\n        swap(items, i, maxIndex); // 交换 \n        i = maxIndex; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,5, 2, 3, 4, 1]\n// 因为 items[0] 不存储数据\n// 所以：heapSize = items.length - 1\nbuildHeap(items, items.length - 1)\nconsole.log(items)\n// [empty, 1, 2, 3, 4, 5]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h3",{attrs:{id:"五、排序算法-堆排序-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、排序算法-堆排序-2"}},[e._v("#")]),e._v(" 五、排序算法：堆排序")]),e._v(" "),t("h4",{attrs:{id:"_1-原理-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-原理-2"}},[e._v("#")]),e._v(" 1. 原理")]),e._v(" "),t("p",[e._v("堆是一棵完全二叉树，它可以使用数组存储，并且大顶堆的最大值存储在根节点（i=1），所以我们可以每次取大顶堆的根结点与堆的最后一个节点交换，此时最大值放入了有效序列的最后一位，并且有效序列减1，有效堆依然保持完全二叉树的结构，然后堆化，成为新的大顶堆，重复此操作，知道有效堆的长度为 0，排序完成。")]),e._v(" "),t("p",[e._v("完整步骤为：")]),e._v(" "),t("ul",[t("li",[e._v("将原序列（n个）转化成一个大顶堆")]),e._v(" "),t("li",[e._v("设置堆的有效序列长度为 n")]),e._v(" "),t("li",[e._v("将堆顶元素（第一个有效序列）与最后一个子元素（最后一个有效序列）交换，并有效序列长度减1")]),e._v(" "),t("li",[e._v("堆化有效序列，使有效序列重新称为一个大顶堆")]),e._v(" "),t("li",[e._v("重复以上2步，直到有效序列的长度为 1，排序完成")])]),e._v(" "),t("h4",{attrs:{id:"_2-动图演示-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-动图演示-2"}},[e._v("#")]),e._v(" 2. 动图演示")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_gif/pfCCZhlbMQQnB87JBMgLUOtSNLdfn4fx6qkpXGKtcE8rrEl3fZNEhQ8zLXOMM1QjPu5zfoIxgbZSIiaXRPIjIicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1",alt:"图片"}})]),e._v(" "),t("h4",{attrs:{id:"_3-代码实现-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现-2"}},[e._v("#")]),e._v(" 3. 代码实现")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function heapSort(items) {\n    // 构建大顶堆\n    buildHeap(items, items.length-1)\n    // 设置堆的初始有效序列长度为 items.length - 1\n    let heapSize = items.length - 1\n    for (var i = items.length - 1; i > 1; i--) {\n        // 交换堆顶元素与最后一个有效子元素\n        swap(items, 1, i);\n        // 有效序列长度减 1\n        heapSize --;\n        // 堆化有效序列(有效序列长度为 currentHeapSize，抛除了最后一个元素)\n        heapify(items, heapSize, 1);\n    }\n    return items;\n}\n\n// 原地建堆\n// items: 原始序列\n// heapSize: 有效序列长度\nfunction buildHeap(items, heapSize) {\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for (let i = Math.floor(heapSize/2); i >= 1; --i) {    \n        heapify(items, heapSize, i);  \n    }\n}\nfunction heapify(items, heapSize, i) {\n    // 自上而下式堆化\n    while (true) {\n        var maxIndex = i;\n        if(2*i <= heapSize && items[i] < items[i*2] ) {\n            maxIndex = i*2;\n        }\n        if(2*i+1 <= heapSize && items[maxIndex] < items[i*2+1] ) {\n            maxIndex = i*2+1;\n        }\n        if (maxIndex === i) break;\n        swap(items, i, maxIndex); // 交换 \n        i = maxIndex; \n    }\n}  \nfunction swap(items, i, j) {\n    let temp = items[i]\n    items[i] = items[j]\n    items[j] = temp\n}\n\n// 测试\nvar items = [,1, 9, 2, 8, 3, 7, 4, 6, 5]\nheapSort(items)\n// [empty, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n")])])]),t("p",[e._v("测试成功")]),e._v(" "),t("h4",{attrs:{id:"_4-复杂度分析-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析-2"}},[e._v("#")]),e._v(" 4. 复杂度分析")]),e._v(" "),t("p",[t("strong",[e._v("时间复杂度：")]),e._v(" 建堆过程的时间复杂度是 "),t("code",[e._v("O(n)")]),e._v(" ，排序过程的时间复杂度是 "),t("code",[e._v("O(nlogn)")]),e._v(" ，整体时间复杂度是 "),t("code",[e._v("O(nlogn)")])]),e._v(" "),t("p",[t("strong",[e._v("空间复杂度：")]),e._v(" "),t("code",[e._v("O(1)")])]),e._v(" "),t("h3",{attrs:{id:"六、内存堆与垃圾回收-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、内存堆与垃圾回收-2"}},[e._v("#")]),e._v(" 六、内存堆与垃圾回收")]),e._v(" "),t("p",[e._v("前端面试高频考察点，瓶子君已经在 栈 章节中介绍过，点击前往"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484417&idx=1&sn=c08cd285e412053dc2c2f1336752c5c9&chksm=faec80d9cd9b09cf266f62dbc5a1b26f5c9f897f6509ed379a20a8333a005b2d8701f6b9bb37&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法5：吊打面试官之数据结构栈（+leetcode刷题）"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"七、堆的经典应用-top-k-问题-常见于腾讯、字节等面试中-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、堆的经典应用-top-k-问题-常见于腾讯、字节等面试中-2"}},[e._v("#")]),e._v(" 七、堆的经典应用：Top K 问题（常见于腾讯、字节等面试中）")]),e._v(" "),t("blockquote",[t("p",[e._v("什么是 Top K 问题？简单来说就是在一组数据里面找到频率出现最高的前 K 个数，或前 K 大（当然也可以是前 K 小）的数。")])]),e._v(" "),t("p",[e._v("这种问题我们该怎么处理喃？我们以从数组中取前 K 大的数据为例，可以按以下步骤来：")]),e._v(" "),t("ul",[t("li",[e._v("从数组中取前 "),t("code",[e._v("K")]),e._v(" 个数，构造一个小顶堆")]),e._v(" "),t("li",[e._v("从 "),t("code",[e._v("K+1")]),e._v(" 位开始遍历数组，每一个数据都和小顶堆的堆顶元素进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。")]),e._v(" "),t("li",[e._v("遍历完成后，堆中的数据就是前 K 大的数据")])]),e._v(" "),t("p",[e._v("遍历数组需要 O(N) 的时间复杂度，一次堆化需要 O(logK) 时间复杂度，所以利用堆求 Top K 问题的时间复杂度为 O(NlogK)。")]),e._v(" "),t("h4",{attrs:{id:"利用堆求-top-k-问题的优势-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用堆求-top-k-问题的优势-2"}},[e._v("#")]),e._v(" 利用堆求 Top K 问题的优势")]),e._v(" "),t("p",[e._v("也许很多人会认为，这种求 Top K 问题可以使用排序呀，没必要使用堆呀")]),e._v(" "),t("p",[e._v("其实是可以使用排序来做的，将数组进行排序（可以是最简单的快排），去前 K 个数就可以了，so easy")]),e._v(" "),t("p",[e._v("但当我们需要在一个动态数组中求 Top K 元素怎么办喃，动态数组可能会插入或删除元素，难道我们每次求 Top K 问题的时候都需要对数组进行重新排序吗？那每次的时间复杂度都为 O(NlogN)")]),e._v(" "),t("p",[e._v("这里就可以使用堆，我们可以维护一个 K 大小的小顶堆，当有数据被添加到数组中时，就将它与堆顶元素比较，如果比堆顶元素大，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆；如果比堆顶元素小，则不做处理。这样，每次求 Top K 问题的时间复杂度仅为 O(logK)")]),e._v(" "),t("h3",{attrs:{id:"八、堆的经典应用-中位数问题-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、堆的经典应用-中位数问题-2"}},[e._v("#")]),e._v(" 八、堆的经典应用：中位数问题")]),e._v(" "),t("p",[e._v("除了 Top K 问题，堆还有一个经典的应用场景就是求中位数问题")]),e._v(" "),t("blockquote",[t("p",[e._v("中位数，就是处于中间的那个数：")]),e._v(" "),t("p",[e._v("[1, 2, 3, 4, 5]   的中位数是 3")]),e._v(" "),t("p",[e._v("[1, 2, 3, 4, 5, 6]  的中位数是 3, 4")]),e._v(" "),t("p",[e._v("即：")]),e._v(" "),t("p",[e._v("当 n % 2 !== 0 时，中位数为：arr[(n-1)/2]")]),e._v(" "),t("p",[e._v("当 n % 2 === 0 时，中位数为：arr[n/2],  arr[n/2 + 1]")])]),e._v(" "),t("p",[e._v("如何利用堆来求解中位数问题喃？")]),e._v(" "),t("p",[e._v("这里需要维护两个堆：")]),e._v(" "),t("ul",[t("li",[e._v("大顶堆：用来存取前 n/2 个小元素，如果 n 为奇数，则用来存取前 "),t("code",[e._v("Math.floor(n/2) + 1")]),e._v("个元素")]),e._v(" "),t("li",[e._v("小顶堆：用来存取后 n/2 个小元素")])]),e._v(" "),t("p",[e._v("那么，中位数就为：")]),e._v(" "),t("ul",[t("li",[e._v("n 为奇数：中位数是大顶堆的堆顶元素")]),e._v(" "),t("li",[e._v("n 为偶数：中位数是大顶堆的堆顶元素与小顶堆的堆顶元素")])]),e._v(" "),t("p",[e._v("当数组为动态数组时，每当数组中插入一个元素时，都需要如何调整堆喃？")]),e._v(" "),t("p",[e._v("如果插入元素比大顶堆的堆顶要大，则将该元素插入到小顶堆中；如果要小，则插入到大顶堆中。")]),e._v(" "),t("p",[e._v("当出入完后后，如果大顶堆、小顶堆中元素的个数不满足我们已上的要求，我们就需要不断的将大顶堆的堆顶元素或小顶堆的堆顶元素移动到另一个堆中，知道满足要求")]),e._v(" "),t("p",[e._v("由于插入元素到堆、移动堆顶元素都需要堆化，所以，插入的时间复杂度为 O(logN) ，每次插入完成后求中位数仅仅需要返回堆顶元素即可，时间复杂度为 O(1)")]),e._v(" "),t("h4",{attrs:{id:"中位数的变形-tp-99-问题-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中位数的变形-tp-99-问题-2"}},[e._v("#")]),e._v(" 中位数的变形：TP 99 问题")]),e._v(" "),t("blockquote",[t("p",[e._v("TP 99 问题：指在一个时间段内（如5分钟），统计某个方法（或接口）每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序，取第 99% 的那个值作为 TP99 值；")]),e._v(" "),t("p",[e._v("例如某个接口在 5 分钟内被调用了100次，每次耗时从 1ms 到 100ms之间不等数据，将请求耗时从小到大排列，TP99 就是取第 100*0.99 = 99 次请求耗时 ，类似地 TP50、TP90，TP99越小，说明这个接口的性能越好")])]),e._v(" "),t("p",[e._v("所以，针对 TP99 问题，我们同样也可以维护两个堆，一个大顶堆，一个小顶堆。大顶堆中保存前 "),t("code",[e._v("99%")]),e._v(" 个数据，小顶堆中保存后 "),t("code",[e._v("1%")]),e._v(" 个数据。大顶堆堆顶的数据就是我们要找的 99% 响应时间。")]),e._v(" "),t("p",[e._v("本小节参考极客时间的：数据结构与算法之美")]),e._v(" "),t("h3",{attrs:{id:"九、总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、总结-2"}},[e._v("#")]),e._v(" 九、总结")]),e._v(" "),t("p",[e._v("堆是一个完全二叉树，并且堆上的任意节点值都必须大于等于（"),t("strong",[e._v("大顶堆")]),e._v("）或小于等于（"),t("strong",[e._v("小顶堆")]),e._v("）其左右子节点值，推可以采用数组存储法存储，可以通过插入式建堆或原地建堆，堆的重要应用有：")]),e._v(" "),t("ul",[t("li",[e._v("堆排序")]),e._v(" "),t("li",[e._v("Top K 问题：堆化，取前 K 个元素")]),e._v(" "),t("li",[e._v("中位数问题：维护两个堆，一大（前50%）一小（后50%），奇数元素取大顶堆的堆顶，偶数取取大、小顶堆的堆顶")])]),e._v(" "),t("p",[e._v("JavaScript 的存储机制分为代码空间、栈空间以及堆空间，代码空间用于存放可执行代码，栈空间用于存放基本类型数据和引用类型地址，堆空间用于存放引用类型数据，当调用栈中执行完成一个执行上下文时，需要进行垃圾回收该上下文以及相关数据空间，存放在栈空间上的数据通过 ESP 指针来回收，存放在堆空间的数据通过副垃圾回收器（新生代）与主垃圾回收器（老生代）来回收。详情可查看"),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247484417&idx=1&sn=c08cd285e412053dc2c2f1336752c5c9&chksm=faec80d9cd9b09cf266f62dbc5a1b26f5c9f897f6509ed379a20a8333a005b2d8701f6b9bb37&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端进阶算法5：吊打面试官之数据结构栈（+leetcode刷题）"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"十、leetcode刷题-最小的k个数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、leetcode刷题-最小的k个数-2"}},[e._v("#")]),e._v(" 十、leetcode刷题：最小的k个数")]),e._v(" "),t("p",[e._v("话不多说，来一道题目加深一下理解吧：")]),e._v(" "),t("p",[e._v("输入整数数组 "),t("code",[e._v("arr")]),e._v(" ，找出其中最小的 "),t("code",[e._v("k")]),e._v(" 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。")]),e._v(" "),t("p",[t("strong",[e._v("示例 1：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n")])])]),t("p",[t("strong",[e._v("示例 2：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("输入：arr = [0,1,2,1], k = 1\n输出：[0]\n")])])]),t("p",[t("strong",[e._v("限制：")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("0 <= k <= arr.length <= 10000")])]),e._v(" "),t("li",[t("code",[e._v("0 <= arr[i] <= 10000")])])]),e._v(" "),t("p",[e._v("题目详情已提交到 https://github.com/sisterAn/JavaScript-Algorithms/issues/59 ，欢迎解答，欢迎star")])])}),[],!1,null,null,null);t.default=i.exports}}]);