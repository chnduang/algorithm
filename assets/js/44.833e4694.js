(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{336:function(n,e,t){"use strict";t.r(e);var s=t(4),v=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"前端进阶算法4-链表原来如此简单-leetcode刷题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端进阶算法4-链表原来如此简单-leetcode刷题"}},[n._v("#")]),n._v(" 前端进阶算法4：链表原来如此简单(+leetcode刷题）")]),n._v(" "),e("p",[n._v("原创 前端瓶子君 前端瓶子君 "),e("em",[n._v("2020-04-09")])]),n._v(" "),e("h3",{attrs:{id:"引言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[n._v("#")]),n._v(" 引言")]),n._v(" "),e("p",[n._v("链表相对于数组来说，要复杂的多，首先，链表不需要连续的内存空间，它是由一组零散的内存块透过指针连接而成，所以，每一个块中必须包含当前节点内容以及后继指针。最常见的链表类型有单链表、双链表以及循环链表。")]),n._v(" "),e("p",[n._v("学习链表最重要的是 "),e("strong",[n._v("多画图多练习")]),n._v(" ，没有捷径可循，在遇到链表问题时，瓶子君总结了一下，可以按照以下五步骤：")]),n._v(" "),e("ul",[e("li",[n._v("确定解题的数据结构：单链表、双链表或循环链表等")]),n._v(" "),e("li",[n._v("确定解题思路：如何解决问题")]),n._v(" "),e("li",[n._v("画图实现：画图可以帮助我们发现思维中的漏洞（一些思路不周的情况）")]),n._v(" "),e("li",[n._v("确定边界条件：思考解题中是否有边界问题以及如何解决")]),n._v(" "),e("li",[n._v("代码实现：解题完成✅")])]),n._v(" "),e("p",[n._v("本文会给常用链表（单链表、双链表以及循环链表）的基本操作已经代码实现，并给出实现思路，这些都是链表解题的基石，请务必掌握！⛽️⛽️⛽️")]),n._v(" "),e("p",[n._v("最后附赠一道 leetcode 题目！")]),n._v(" "),e("p",[n._v("下面开始本节的学习吧！！！👇👇👇")]),n._v(" "),e("h3",{attrs:{id:"一、单链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、单链表"}},[n._v("#")]),n._v(" 一、单链表")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzj7y5RKe381ibcdPyHhx8FFTNibCnMqdBEhGialmGnyHzTsnMJq4XibkuaQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),n._v("img")]),n._v(" "),e("p",[n._v("单链表结构：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function List () {\n  // 节点\n  let Node = function (element) {\n    this.element = element\n    this.next = null\n  }\n  // 初始头节点为 null\n  let head = null\n  \n  // 链表长度\n  let length = 0\n  // 操作\n  this.getList = function() {return head}\n  this.search = function(list, element) {}\n  this.append = function(element) {}\n  this.insert = function(position, element) {}\n  this.remove = function(element){}\n  this.isEmpty = function(){}\n  this.size = function(){}\n}\n")])])]),e("h4",{attrs:{id:"_1-追加节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-追加节点"}},[n._v("#")]),n._v(" 1. 追加节点：")]),n._v(" "),e("p",[n._v("**确定解题的数据结构：**单链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 初始化一个节点（待追加节点），遍历到链尾，在尾节点后插入该节点")]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHz97TLJP0ymy9X4o55WdRTCRkNuLG6u2Hqv2IwWgZ6x5VBcxG57MPRsQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")]),n._v(" 当链表为 "),e("code",[n._v("null")]),n._v(" ，直接将 "),e("code",[n._v("head")]),n._v(" 指向待插入节点，不需要遍历")]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function append (element) {\n  let node = new Node(element),\n      p = head\n  if (!head){\n    head = node\n  } else {\n    while (p.next) {\n      p = p.next\n    }\n    p.next = node\n  }\n  length += 1\n}\n\n// 测试\nlet list = new List()\nfor(let i = 0; i < 5; i+=1) {\n  list.append(i)\n}\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_2-查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找"}},[n._v("#")]),n._v(" 2. 查找：")]),n._v(" "),e("p",[n._v("**确定解题的数据结构：**单链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 遍历单链表，判断节点值是否等于待查找值，相等则返回 "),e("code",[n._v("true")]),n._v(" ，否则继续遍历下一个节点，直到遍历完整个链表还未找到，则返回 "),e("code",[n._v("false")])]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")]),n._v(" 很简单，读者可以尝试画一下")]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")]),n._v(" 当链表为 "),e("code",[n._v("null")]),n._v(" ，可直接返回 "),e("code",[n._v("false")])]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 判断链表中是否存在某节点\nfunction search(element) {\n  let p = head\n  if (!p) return false\n  while(p) {\n    if (p.element === element) return true\n    p = p.next\n  }\n  return false\n}\n\n// 测试\nlist.search(4) // true\nlist.search(11) // false\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_3-在-position-位置插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-在-position-位置插入"}},[n._v("#")]),n._v(" 3. 在 position 位置插入：")]),n._v(" "),e("p",[n._v("**确定解题的数据结构：**单链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 初始化一个节点（待插入节点 "),e("code",[n._v("node")]),n._v(" ），遍历到 "),e("code",[n._v("position")]),n._v(" 前一个位置节点，在该节点后插入 "),e("code",[n._v("node")])]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzibASTXBAck7drvRaNqH32ZcKpYSjOSH78RkZ5KJ0YLJNfBaNeM3TW3g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),n._v("img")]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")])]),n._v(" "),e("ul",[e("li",[n._v("当 "),e("code",[n._v("position")]),n._v(" 为 "),e("code",[n._v("0")]),n._v(" 时，直接将插入节点 "),e("code",[n._v("node.next")]),n._v(" 指向 "),e("code",[n._v("head")]),n._v(" ， "),e("code",[n._v("head")]),n._v(" 指向 "),e("code",[n._v("node")]),n._v(" 即可，不需要遍历")]),n._v(" "),e("li",[n._v("当待插入位置 "),e("code",[n._v("position < 0")]),n._v(" 或超出链表长度 "),e("code",[n._v("position > length")]),n._v(" ，都是有问题的，不可插入，此时直接返回 "),e("code",[n._v("null")]),n._v(" ，插入失败")])]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 插入 position 的后继节点\nfunction insert (position, element) {\n  // 创建插入节点\n  let node = new createNode(element)\n  if (position >= 0 && position <= length) {\n    let prev = head,\n        curr = head,\n        index = 0\n    if(position === 0) {\n      node.next = head\n      head = node\n    } else {\n      while(index < position) {\n        prev = curr\n        curr = curr.next\n        index ++\n      }\n      prev.next = node\n      node.next = curr\n    }\n    length += 1\n  } else {\n    return null\n  }\n}\n\n// 测试\nlist.insert(10)\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_4-删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除"}},[n._v("#")]),n._v(" 4. 删除：")]),n._v(" "),e("p",[n._v("**确定解题的数据结构：**单链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 遍历单链表，找到待删除节点，删除")]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzj3AWwPVUHJYyMPLjibXtBscI8VcnfIOcNOqrIjP5FR9cBia17M0x8cdA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),n._v("img")]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")]),n._v(" 当链表为 "),e("code",[n._v("null")]),n._v(" ，直接返回")]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 删除值为 element 节点\nfunction remove (element) {\n  let p = head, prev = head\n  if(!head) return\n  while(p) {\n    if(p.element === element) {\n      p = p.next\n      prev.next = p\n    } else {\n        prev = p\n        p = p.next\n    }\n  }\n}\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_5-复杂度分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-复杂度分析"}},[n._v("#")]),n._v(" 5. 复杂度分析：")]),n._v(" "),e("p",[e("strong",[n._v("查找：从头节点开始查找，时间复杂度为 O(n)")])]),n._v(" "),e("p",[e("strong",[n._v("插入或删除：在某一节点后插入或删除一个节点（后继节点）的时间复杂度为 O(1)")])]),n._v(" "),e("p",[n._v("链表五步骤是不是很好用😊，下面看一下双链表👇")]),n._v(" "),e("h3",{attrs:{id:"二、双链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、双链表"}},[n._v("#")]),n._v(" 二、双链表")]),n._v(" "),e("p",[n._v("顾名思义，单链表只有一个方向，从头节点到尾节点，那么双链表就有两个方向，从尾节点到头节点：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzuIwNR6y6ZMJTHRAo0O9AeGaicUJg1mnAiamaf9jCYexJR7KbiarWpiaZwA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function DoublyLinkedList() {\n    let Node = function(element) {\n        this.element = element\n        // 前驱指针\n        this.prev = null\n        // 后继指针\n        this.next = null\n    }\n    // 初始头节点为 null\n  \tlet head = null\n    // 新增尾节点\n    let tail = null\n  \n  \t// 链表长度\n  \tlet length = 0\n    // 操作\n    this.search = function(element) {}\n    this.insert = function(position, element) {}\n    this.removeAt = function(position){}\n    this.isEmpty = function(){ return length === 0 }\n    this.size = function(){ return length }\n}\n")])])]),e("h4",{attrs:{id:"_1-在-position-位置插入节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-在-position-位置插入节点"}},[n._v("#")]),n._v(" 1. 在 position 位置插入节点：")]),n._v(" "),e("p",[e("strong",[n._v("确定解题的数据结构：")]),n._v(" 双链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 初始化一个节点（待插入节点 "),e("code",[n._v("node")]),n._v(" ），遍历链表到 "),e("code",[n._v("position")]),n._v(" 前一个位置节点，在该节点位置后插入 "),e("code",[n._v("node")])]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzZeNkXPawiclyEwK9xAbERmfNdjhnPicO9nsU0xwHBz59nUflaicj5JLibQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")])]),n._v(" "),e("p",[n._v("当待插入位置 "),e("code",[n._v("position < 0")]),n._v(" 或超出链表长度 "),e("code",[n._v("position > length")]),n._v(" ，都是有问题的，不可插入，此时直接返回 "),e("code",[n._v("null")]),n._v(" ，插入失败")]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 插入 position 的后继节点\nfunction insert (position, element) {\n  // 创建插入节点\n  let node = new Node(element)\n  if (position >= 0 && position < length) {\n    let prev = head,\n        curr = head,\n        index = 0\n    if(position === 0) {\n      // 在第一个位置添加\n        if(!head) { // 注意这里与单链表不同\n          head = node\n          tail = node\n        } else {\n          // 双向\n          node.next = head\n          head.prev = node\n          // head 指向新的头节点\n          head = node\n        }\n    } else if(position === length) {\n      // 插入到尾节点\n      curr = tial\n      curr.next = node\n      node.prev = curr\n      // tail 指向新的尾节点\n      tail = node\n    } else {\n      while(index < position) {\n        prev = curr\n        curr = curr.next\n        index ++\n      }\n      // 插入到 prev 后，curr 前\n      prev.next = node\n      node.next = curr\n      curr.prev = node\n      node.prev = prev\n    }\n    length += 1\n    return true\n  } else {\n    return false\n  }\n}\n\n// 测试\nlist.insert(10)\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_2-删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-删除"}},[n._v("#")]),n._v(" 2. 删除：")]),n._v(" "),e("p",[e("strong",[n._v("确定解题的数据结构：")]),n._v(" 双链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 遍历双链表，找到待删除节点，删除")]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHz6yiaU6wiaRPdfZQql5daFibMn00Icld6egUHswVToWYm1LlV3PoNTTecQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")]),n._v(" 当链表为 "),e("code",[n._v("null")]),n._v(" ，直接返回")]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 删除 position 位置的节点\nfunction removeAt (position) {\n  if (position >= 0 && position < length && length > 0) {\n    let prev = head,\n        curr = head,\n        index = 0\n    if(position === 0) {\n      // 移除头节点\n        if(length === 1) { // 仅有一个节点\n          head = null\n          tail = null\n        } else {\n          head = head.next\n          head.prev = null\n        }\n    } else if(position === length-1) {\n      // 移除尾节点\n      curr = tial\n      tail = curr.prev\n      tail.next = null\n    } else {\n      while(index < position) {\n        prev = curr\n        curr = curr.next\n        index ++\n      }\n      // 移除curr\n      prev.next = curr.next\n      curr.next.prev = prev\n    }\n    length -= 1\n    return curr.element\n  } else {\n    return null\n  }\n}\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_3-查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-查找"}},[n._v("#")]),n._v(" 3. 查找：")]),n._v(" "),e("p",[n._v("双链表的查找和单链表类似，都是遍历链表，找到返回 "),e("code",[n._v("true")]),n._v("，找不到返回 "),e("code",[n._v("false")]),n._v(" 。")]),n._v(" "),e("h4",{attrs:{id:"_4-复杂度分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析"}},[n._v("#")]),n._v(" 4. 复杂度分析：")]),n._v(" "),e("p",[e("strong",[n._v("查找：查找前驱节点或后继节点时间复杂度为 O(1)，其它节点仍为 O(n)")])]),n._v(" "),e("p",[e("strong",[n._v("插入或删除：插入或删除前驱节点或后继节点的时间复杂度都为 O(1)")])]),n._v(" "),e("h3",{attrs:{id:"三、循环单链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、循环单链表"}},[n._v("#")]),n._v(" 三、循环单链表")]),n._v(" "),e("p",[n._v("循环单链表是一种特殊的单链表，它和单链表的唯一区别是：单链表的尾节点指向的是 NULL，而循环单链表的尾节点指向的是头节点，这就形成了一个首尾相连的环：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHz8ngPXt8448KcnWvPNhIpLe3weDSOwTicJDCib7GVWsybPzSRvgm4QEiaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),n._v("img")]),n._v(" "),e("p",[n._v("既然有循环单链表，当然也有循环双链表，循环双链表和双链表不同的是：")]),n._v(" "),e("ul",[e("li",[n._v("循环双链表的 "),e("code",[n._v("tail.next")]),n._v("（ "),e("code",[n._v("tail")]),n._v(" 的后继指针） 为 "),e("code",[n._v("null")]),n._v(" ，循环双链表的 "),e("code",[n._v("tail.next")]),n._v("为 "),e("code",[n._v("head")])]),n._v(" "),e("li",[n._v("循环双链表的 "),e("code",[n._v("head.prev")]),n._v("（ "),e("code",[n._v("head")]),n._v(" 的前驱指针） 为 "),e("code",[n._v("null")]),n._v(" ，循环双链表的 "),e("code",[n._v("head.prev")]),n._v("为 "),e("code",[n._v("tail")])])]),n._v(" "),e("p",[n._v("这里以循环单列表为例")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function CircularLinkedList() {\n    let Node = function(element) {\n        this.element = element\n        // 后继指针\n        this.next = null\n    }\n    // 初始头节点为 null\n  \tlet head = null\n  \n  \t// 链表长度\n  \tlet length = 0\n    // 操作\n    this.search = function(element) {}\n    this.insert = function(positon, element) {}\n    this.removeAt = function(position){}\n    this.isEmpty = function(){ return length === 0 }\n    this.size = function(){ return length }\n}\n")])])]),e("h4",{attrs:{id:"_1-在-positon-后插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-在-positon-后插入"}},[n._v("#")]),n._v(" 1. 在 positon 后插入：")]),n._v(" "),e("p",[e("strong",[n._v("确定解题的数据结构：")]),n._v(" 循环单链表")]),n._v(" "),e("p",[e("strong",[n._v("确定解题思路：")]),n._v(" 初始化一个节点（待插入节点 "),e("code",[n._v("node")]),n._v(" ），遍历到 "),e("code",[n._v("position")]),n._v(" 前一个位置节点，在该节点后插入 "),e("code",[n._v("node")])]),n._v(" "),e("p",[e("strong",[n._v("画图实现：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRa6vhSIWibAzJqBB3BlrOHzibEav8seYAtRXdT3XXZymvCg1DdPTYdwibLX8pPf7x3kgDOBHNHxgypg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),n._v(" "),e("p",[e("strong",[n._v("确定边界条件：")])]),n._v(" "),e("ul",[e("li",[n._v("当 "),e("code",[n._v("position")]),n._v(" 为 "),e("code",[n._v("0")]),n._v(" 时，需要遍历到尾节点，然后在尾节点后插入节点 ， 并将 "),e("code",[n._v("head")]),n._v(" 指向")]),n._v(" "),e("li",[n._v("当待插入位置 "),e("code",[n._v("position < 0")]),n._v(" 或超出链表长度 "),e("code",[n._v("position > length")]),n._v(" ，都是有问题的，不可插入，此时直接返回 "),e("code",[n._v("null")]),n._v(" ，插入失败")])]),n._v(" "),e("p",[e("strong",[n._v("代码实现：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 插入 position 的后继节点\nfunction insert (position, element) {\n  // 创建插入节点\n  let node = new createNode(element)\n  if (position >= 0 && position <= length) {\n    let prev = head,\n        curr = head,\n        index = 0\n    if(position === 0) {\n      // 与单链表插入不同的\n      while(index < length) {\n        prev = curr\n        curr = curr.next\n        index ++\n      }\n      prev.next = node\n      node.next = curr\n      head = node\n    } else {\n      while(index < position) {\n        prev = curr\n        curr = curr.next\n        index ++\n      }\n      prev.next = node\n      node.next = curr\n    }\n    length += 1\n  } else {\n    return null\n  }\n}\n\n// 测试\nlist.insert(10)\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_2-查找-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找-2"}},[n._v("#")]),n._v(" 2. 查找：")]),n._v(" "),e("p",[n._v("和单链表类似，唯一不同的是：循环单链表的循环结束条件为 "),e("code",[n._v("p !== head")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 判断链表中是否存在某节点\nfunction search(element) {\n  let p = head\n  if (!p) return false\n  // 和单链表的不同所在\n  while(p !== head) {\n    if (p.element === element) return true\n    p = p.next\n  }\n  return false\n}\n\n// 测试\nlist.search(4) // true\nlist.search(11) // false\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_3-删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-删除"}},[n._v("#")]),n._v(" 3. 删除：")]),n._v(" "),e("p",[n._v("和单链表类似，唯一不同的是：循环单链表的循环结束条件为 "),e("code",[n._v("p !== head")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 删除值为 element 节点\nfunction remove (element) {\n  let p = head, prev = head\n  if(!head) return\n  while(p !== head) {\n    if(p.element === element) {\n      p = p.next\n      prev.next = p\n    } else {\n        prev = p\n        p = p.next\n    }\n  }\n}\n")])])]),e("p",[n._v("解题完成✅")]),n._v(" "),e("h4",{attrs:{id:"_4-复杂度分析-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析-2"}},[n._v("#")]),n._v(" 4. 复杂度分析")]),n._v(" "),e("p",[e("strong",[n._v("查找：循环链表从任一节点开始查找目标节点，时间复杂度为 O(n)")])]),n._v(" "),e("p",[e("strong",[n._v("插入或删除：它和单链表一样，后继节点插入及删除的时间复杂度为 O(1)")])]),n._v(" "),e("h3",{attrs:{id:"四、leetcode21-合并两个有序链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、leetcode21-合并两个有序链表"}},[n._v("#")]),n._v(" 四、leetcode21：合并两个有序链表")]),n._v(" "),e("p",[n._v("将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。")]),n._v(" "),e("p",[e("strong",[n._v("示例：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n")])])]),e("p",[n._v("欢迎将答案提交到 https://github.com/sisterAn/JavaScript-Algorithms/issues/11，让更多人看到，瓶子君也会在明日放上自己的解答。")]),n._v(" "),e("h3",{attrs:{id:"五、认识更多的前端道友-一起进阶前端开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、认识更多的前端道友-一起进阶前端开发"}},[n._v("#")]),n._v(" 五、认识更多的前端道友，一起进阶前端开发")]),n._v(" "),e("p",[n._v("前端算法集训营第一期免费开营啦🎉🎉🎉，免费哟！")]),n._v(" "),e("p",[n._v("在这里，你可以和志同道合的前端朋友们（200+）一起进阶前端算法，从0到1构建完整的数据结构与算法体系。")]),n._v(" "),e("p",[n._v("在这里，瓶子君不仅介绍算法，还将算法与前端各个领域进行结合，包括浏览器、HTTP、V8、React、Vue源码等。")]),n._v(" "),e("p",[n._v("在这里，你可以每天学习一道大厂算法题（阿里、腾讯、百度、字节等等）或 leetcode，瓶子君都会在第二天解答哟！")])])}),[],!1,null,null,null);e.default=v.exports}}]);